# Copyright (c) 2021-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("../batterymgr.gni")

config("batterysrv_public_config") {
  include_dirs = [
    "native/include",
    "native/notification",
    "${battery_inner_api}/native/include",
  ]
}

ohos_shared_library("charging_sound") {
  include_dirs = [ "native/include" ]
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  branch_protector_ret = "pac_ret"

  sources = [ "native/src/charging_sound.cpp" ]

  configs = [ "${battery_utils}:utils_config" ]

  external_deps = [
    "audio_framework:audio_client",
    "c_utils:utils",
    "config_policy:configpolicy_util",
    "hilog:libhilog",
    "player_framework:media_client",
  ]

  subsystem_name = "powermgr"
  part_name = "battery_manager"
}

ohos_shared_library("batteryservice") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  branch_protector_ret = "pac_ret"

  sources = [
    "${battery_utils}/native/src/battery_xcollie.cpp",
    "native/src/battery_callback.cpp",
    "native/src/battery_config.cpp",
    "native/src/battery_dump.cpp",
    "native/src/battery_light.cpp",
    "native/src/battery_notify.cpp",
    "native/src/battery_service.cpp",
  ]

  configs = [
    "${battery_utils}:utils_config",
    "${battery_utils}:coverage_flags",
  ]

  public_configs = [
    "${battery_service_zidl}:batterysrv_public_config",
    ":batterysrv_public_config",
  ]

  deps = [
    "${battery_service_zidl}:batterysrv_stub",
    "${battery_utils}/hookmgr:battery_hookmgr"
  ]

  external_deps = [ "power_manager:power_permission" ]
  external_deps += [
    "ability_base:want",
    "ability_runtime:ability_manager",
    "bundle_framework:appexecfwk_base",
    "cJSON:cjson",
    "c_utils:utils",
    "common_event_service:cesfwk_core",
    "common_event_service:cesfwk_innerkits",
    "drivers_interface_battery:libbattery_proxy_2.0",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "ipc:ipc_core",
    "init:libbegetutil",
    "power_manager:power_ffrt",
    "power_manager:power_sysparam",
    "power_manager:power_vibrator",
    "power_manager:powermgr_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  if (use_musl) {
    if (musl_use_jemalloc && musl_use_jemalloc_dfx_intf) {
      defines += [ "CONFIG_USE_JEMALLOC_DFX_INTF" ]
    }
  }

  if (battery_manager_feature_enable_charging_sound) {
    defines += [ "BATTERY_MANAGER_ENABLE_CHARGING_SOUND" ]
  }

  if (battery_manager_feature_enable_wireless_charge) {
    defines += [ "BATTERY_MANAGER_ENABLE_WIRELESS_CHARGE" ]
  }

  if (battery_manager_feature_set_low_capacity_threshold) {
    defines += [ "BATTERY_MANAGER_SET_LOW_CAPACITY_THRESHOLD" ]
  }

  if (battery_manager_feature_support_notification) {
    defines += [ "BATTERY_SUPPORT_NOTIFICATION" ]
  }

  if (has_sensors_miscdevice_part) {
    external_deps += [ "miscdevice:light_interface_native" ]
  }

  if (has_hiviewdfx_hisysevent_part) {
    external_deps += [ "hisysevent:libhisysevent" ]
  }

  if (has_battery_config_policy_part) {
    defines += [ "HAS_BATTERY_CONFIG_POLICY_PART" ]
    external_deps += [ "config_policy:configpolicy_util" ]
  }

  if (build_variant == "user") {
    defines += [ "BATTERY_USER_VERSION" ]
  }

  subsystem_name = "powermgr"
  part_name = "battery_manager"
}

ohos_shared_library("battery_notification") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  branch_protector_ret = "pac_ret"

  include_dirs = [ "native/notification" ]

  sources = [
    "native/notification/button_event.cpp",
    "native/notification/notification_center.cpp",
    "native/notification/notification_decorator.cpp",
    "native/notification/notification_locale.cpp",
    "native/notification/notification_manager.cpp",
  ]

  configs = [
    "${battery_utils}:utils_config",
    "${battery_utils}:coverage_flags",
  ]

  public_configs = [ ":batterysrv_public_config" ]

  deps = [ "${battery_inner_api}:batterysrv_client" ]

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "cJSON:cjson",
    "c_utils:utils",
    "config_policy:configpolicy_util",
    "distributed_notification_service:ans_innerkits",
    "hilog:libhilog",
    "i18n:intl_util",
    "image_framework:image_native",
    "ipc:ipc_single"
  ]

  subsystem_name = "powermgr"
  part_name = "battery_manager"
}

group("service") {
  deps = [
    ":battery_notification",
    ":batteryservice",
    "native/profile:battery_config",
    "native/profile:battery_vibrator_config",
  ]

  if (battery_manager_feature_enable_charging_sound) {
    deps += [ ":charging_sound" ]
  }

  if (battery_manager_feature_support_notification) {
    deps += [ "native/resources:battery_locale_path" ]
    if (battery_manager_feature_support_notification_string) {
      deps += [
        "native/resources:battery_notification_base",
        "native/resources:battery_notification_bo_CN",
        "native/resources:battery_notification_ug",
        "native/resources:battery_notification_zh_CN",
        "native/resources:battery_notification_zh_HK",
        "native/resources:battery_notification_zh_TW",
        "native/resources:battery_notification_zz_ZX",
      ]
    }
  }
}
